<?php

/**
 * @file
 * module file with all functions for Driki usage
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Doctrine\Common\Util\Debug;
use Drupal\Core\Entity\EntityManagerInterface;
use Drupal\Core\Field\ConfigFieldItemInterface;

/**
 * Implements hook_theme().
 */
function driki_theme($existing, $type, $theme, $path) {
  return array(
    'driki_field' => array(
      'variables' => array(
        'url' => NULL,
        'format' => NULL,
        'wikipage' => NULL,
      ),
     'template' => 'driki_field',
    ),
  );
}

// /**
//  * Implements hook_node_form_alter().
//  */
function driki_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Only do the parsing for driki fields.
  $field_map = \Drupal::entityManager()->getFieldMap();
  $form_entity = $form_state->getFormObject()->getEntity();
  $node_type = $form_entity->bundle();
  foreach ($field_map['node'] as $key => $value) {
    if ($value['type'] == 'driki_field' && in_array($node_type, $value['bundles'])) {
      $form[$key]['widget'][0]['driki_tmp_extra_params'] = array(
        '#type' => 'textfield',
        '#title' => t('URL Parameters'),
        '#description' => t('Additional URL Parameters (format: key=value / separate with semicolon)'),
        '#default_value' => '',
        '#size' => 60,
        '#maxlength' => 2048,
      );
      $form[$key]['widget'][0]['driki_tmp_fetch_data'] = array(
        '#type' => 'checkbox',
        '#title' => t('Fetch new data'),
        '#description' => t('Check this option if you actually want to fetch from the external source.'),
        '#default_value' => 0,
      );

      $form['actions']['publish']['#submit'][] = '_driki_field_process'; // Custom submit handlers now have to be added specifically to the button pressed.
      $form['actions']['unpublish']['#submit'][] = '_driki_field_process';
      $form['actions']['submit']['#submit'][] = '_driki_field_process';
      break;
    }
  }
}

// /**
//  * Field process callback
//  */
function _driki_field_process($form, &$form_state) {
  // See https://www.drupal.org/node/2310411
  // Get the actual driki fields.
  $form_entity  = $form_state->getFormObject()->getEntity();
  $node_type    = $form_entity->bundle();
  $form_fields  = $form_entity->getFieldDefinitions();

  foreach ($form_fields as $key => $value) {
    // If driki field was found, get the XML, filter it with the chosen format &
    if ($value->getType() == 'driki_field') {
      $extra_params = $form_state->getValue([$value->getName(), 0, 'driki_tmp_extra_params']);
      $fetch_data   = $form_state->getValue([$value->getName(), 0, 'driki_tmp_fetch_data']);
      // Get import parameters
      $driki_url_params = _driki_get_saved_params();
      $driki_params = _driki_get_saved_params('array');
      // Get per temporaray, per field parameters
      if(isset($extra_params) && !empty($extra_params)) {
        $tmp_params = explode(';', $extra_params);
        foreach($tmp_params as $tmp_param) {
          if($driki_url_params == '') {
          $driki_url_params .= '?' . $tmp_param;
          }
          else {
            $driki_url_params .= '&' . $tmp_param;
          }
        }
      }

      $wk_url = $form_state->getValue([$value->getName(), 0, 'url']);
      $wk_format = $form_state->getValue([$value->getName(), 0, 'format']);
      $wk_wikipage = '';

      // Dont validate if we dont want to fetch the data - so no processing done.
      if($fetch_data == 0) {
        if ($form_state->hasValue([$value->getName(), 0,'wikipage']) && !$form_state->isValueEmpty([$value->getName(), 0,'wikipage'])) {
          $wk_wikipage = $form_state->getValue([$value->getName(), 0,'wikipage']);
        }
        else {
          $wk_wikipage = '';
        }
      }
      else {
        $wiki_url = $form_state->getValue([$value->getName(), 0,'url']) . $driki_url_params;
        if (!empty($wiki_url)) {
          $data = _driki_curl_get_page($wiki_url);
          $xml = simplexml_load_string($data);

          // Replace lastupdated information
          $updatepattern = '/({{lastupdated_at)(.*)(lastupdated_by}}+?)/s';

          $updatereplace = t('last updated on') . ' ' . format_date(strtotime($xml->updated_on), 'medium') . ' ' . t('by') . ' ' . $xml->author['name'];
          $xml->text = preg_replace($updatepattern, $updatereplace, $xml->text);

          // Remove unnecessary stuff (currently redmine-specific)
          $wiki_trash = array(
            "|h2. Comments|",
            "|h1. Comments|",
            "|(\{\{)(comment.*?)(\}\})|",
            "|(\{\{)(>toc.*?)(\}\})|",
            "|(\{\{)(fnlist.*?)(\}\})|",
            );
          $xml->text = preg_replace($wiki_trash, "", $xml->text);

          // Replace image-tokens and store them accordingly
          if($driki_params && in_array('include=attachments', $driki_params)) {
            $attachments = json_decode(json_encode($xml->attachments), TRUE);
            if(isset($attachments['attachment']['id'])) {
              // Only one attachment
              $file_url = $attachments['attachment']['content_url'] . $driki_url_params;
              $file_get = _driki_curl_get_page($file_url);
              $file_dest = 'public://driki/attachments/' . $attachments['attachment']['filename'];
              // if (file_destination($file_dest, FILE_EXISTS_ERROR)) {
                // The file doesnt exist yet, so we can save it
              $file = file_save_data($file_get, $file_dest, FILE_EXISTS_REPLACE);
              // }
              $filepath = $file->url();
              if(in_array($file->getMimeType(), array('image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/x-ms-bmp'))) {
                $imghtml = '<img src="' . $filepath . '" />';
                $xml->text = preg_replace('/(!)([^!\s]*)(!+?)/s', $imghtml, $xml->text, 1);
              }
            }
            else if(isset($attachments['attachment'][0]['id'])) {
              // Multiple attachments
              foreach($attachments['attachment'] as $attachment) {
                // Load the files contents
                $file_url = $attachment['content_url'] . $driki_url_params;
                $file_get = _driki_curl_get_page($file_url);
                $file_dest = 'public://driki/attachments/' . $attachment['filename'];
                // if (file_destination($file_dest, FILE_EXISTS_ERROR)) {
                  // The file doesnt exist yet, so we can save it
                $file = file_save_data($file_get, $file_dest, FILE_EXISTS_REPLACE);
                // }
                  // $xml->text = preg_replace('/(!)([^!\s]*)(!+?)/s', '!' . $file->fid . '!', $xml->text, 1);
                  // $xml->text = preg_replace('/^!((?:(?!drikiimgplaceholder).)+)!$/im', '!drikiimgplaceholder' . $file->fid . '!', $xml->text, 1);
                $filepath = $file->url();
                if(in_array($file->getMimeType(), array('image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/x-ms-bmp'))) {
                  $imghtml = '<img src="' . $filepath . '" />';
                  // $xml->text = str_replace('!' . $attachment['content_url'] . '!', $imghtml, $xml->text);
                  $xml->text = preg_replace('/(!)([^!\s]*)(!+?)/s', $imghtml, $xml->text, 1);
                }
              }
            }
          }

          // Save the data from the text object to our wikipage field.
          // Will be filtered on output.
          $wk_wikipage = (string)$xml->text;
          $form_entity->set($value->getName(), array('url' => $wk_url, 'format' => $wk_format, 'wikipage' => $wk_wikipage));
          $form_entity->save();
        }
      }
    }
  }
}

/**
 * Helper function to get the Wiki entry XML via curl.
 */
function _driki_curl_get_page($path) {
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $path);
  curl_setopt($ch, CURLOPT_FAILONERROR, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_TIMEOUT, 15);
  $output = curl_exec($ch);
  curl_close($ch);
  return $output;
}

 /**
  * Helper.
  *
  * get saved driki variable for parameters.
  *
  */
function _driki_get_saved_params($type = NULL) {
  $config = \Drupal::config('driki.settings');
  $driki_params_str = $config->get('urlparams');

  $driki_params = $driki_params_str ? explode(';', $driki_params_str) : FALSE;

  if($type == 'array') {
    return $driki_params;
  }

  $driki_url_params = '';
  if($driki_params) {
    foreach($driki_params as $param) {
      if($driki_url_params == '') {
        $driki_url_params .= '?' . $param;
      }
      else {
        $driki_url_params .= '&' . $param;
      }
    }
    return $driki_url_params;
  }
  return FALSE;
}